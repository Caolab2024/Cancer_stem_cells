setwd("D:\\科研\\gliomas_prol\\2.scRNA")

sceList <- readRDS("sceList.rds")

####################
table(sceList$Celltype )
sceList$Celltype <- ifelse(sceList$Celltype=="MKI67+ glioma","Glioma",sceList$Celltype)
id <- colnames(sceList)[sceList$Celltype=="Glioma"]
sceList <- sceList[,id]
########

sceList <- NormalizeData(sceList, normalization.method = "LogNormalize", scale.factor = 1e4)
sceList <- FindVariableFeatures(sceList, selection.method = "vst", nfeatures = 2000)
sceList <- ScaleData(sceList)
sceList <- RunPCA(sceList, features = VariableFeatures(object =sceList)) ##默认会输???5个主成分

library(harmony)
table(sceList$orig.ident)
sceList=sceList %>% RunHarmony("orig.ident", plot_convergence = TRUE)
sceList <-sceList %>% 
  RunUMAP(reduction = "harmony", dims = 1:30) %>% 
  FindNeighbors(reduction = "harmony", dims = 1:30) 

library(clustree)
library(patchwork)



sceList <-sceList%>% 
  FindClusters(resolution = 0.5) %>% 
  identity()
sceList <- sceList %>% 
  RunTSNE(reduction = "harmony", dims = 1:30)
################
















###################
DimPlot(sceList, reduction = "umap",label = T,raster = F)
FeaturePlot(sceList,"SOX2",raster=F)
VlnPlot(sceList,"SOX2")
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes
sceList <- CellCycleScoring(sceList, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)
sceList $Phase
DimPlot(sceList, reduction = "umap",label = T,raster = F,group.by = "Phase")
###################
degs <- FindAllMarkers(sceList,only.pos = T,logfc.threshold = 1)
FeaturePlot(sceList,"HLA-DRA")
DotPlot(sceList,features = c("MKI67","PTPRC","ITGAM","CD68","CD3E","CD4","CD8A","CD79A","CD19","ACTA2","PDGFRB","PECAM1", "OLIG2", "MBP",
                             "SOX2", "OLIG1", "GFAP","S100B"), cols = c("white","blue"),col.min =0)+coord_flip()
#################去除非肿瘤细胞
id <- colnames(sceList)[sceList$RNA_snn_res.0.5==12|sceList$RNA_snn_res.0.5==16]
num_all <- c()
for (i in id) {num <- which(i==colnames(sceList))
num_all <- c(num_all,num)
}
sceList <- sceList[,-num_all]
DimPlot(sceList, reduction = "umap",label = T,raster = F,group.by ="RNA_snn_res.0.5" )
###########

sceList <- NormalizeData(sceList, normalization.method = "LogNormalize", scale.factor = 1e4)
sceList <- FindVariableFeatures(sceList, selection.method = "vst", nfeatures = 2000)
sceList <- ScaleData(sceList)
sceList <- RunPCA(sceList, features = VariableFeatures(object =sceList)) ##默认会输???5个主成分

library(harmony)
table(sceList$orig.ident)
sceList=sceList %>% RunHarmony("orig.ident", plot_convergence = TRUE)
sceList <-sceList %>% 
  RunUMAP(reduction = "harmony", dims = 1:30) %>% 
  FindNeighbors(reduction = "harmony", dims = 1:30) 

library(clustree)
library(patchwork)



sceList <-sceList%>% 
  FindClusters(resolution = 0.5) %>% 
  identity()
sceList <- sceList %>% 
  RunTSNE(reduction = "harmony", dims = 1:30)

DimPlot(sceList, reduction = "umap",label = T,raster = F)
############

sceList <-sceList%>% 
  FindClusters(resolution = 0.08) %>% 
  identity()
DimPlot(sceList, reduction = "umap",label = T,raster = F)
##########
degs <- FindAllMarkers(sceList,only.pos = T,logfc.threshold = T)
saveRDS(sceList,"Tmuor.rds")
#
#干性
sceList <- readRDS("Tmuor.rds")
library(CytoTRACE)
#sceList <- sceList[,sample(colnames(sceList),10000)]
dat <- as.matrix(sceList[['RNA']]@counts)

batch <- sceList$orig.ident
dat <- CytoTRACE(
  dat ,
  batch = batch,
  enableFast =F)

sceList$Cytotrace <- as.numeric(dat$CytoTRACE[colnames(sceList)] )
plot_dat <- data.frame(Celltype =Idents(sceList),Cytotrace =sceList$Cytotrace)


library(ggplot2)
library(ggthemes)
library(ggpubr)
library(grDevices)
library(colorspace)
library(grDevices)
library(colorspace)
c1=colorRampPalette(c("red", "yellow","blue"),space = "rgb")
c1=c1(1000)
c2=colorRampPalette(c("#00994d", "#990099","#990000"),space = "rgb")
c2=c2(1000)
library(ggsci)


ggplot(plot_dat,aes(Celltype,Cytotrace,fill=Celltype)) + 
  geom_boxplot()
id <- sceList@meta.data
##############################
sceList$Cytotrace
umap_label <- FetchData(sceList,vars = c("Cytotrace", "UMAP_1", "UMAP_2"))
ggplot(umap_label,aes(x = UMAP_1,y =UMAP_2,colour =Cytotrace))+
  geom_point(size = 3)+scale_color_gradientn(values = seq(0,1,0.2),
                                             colours = c("#3288BDFF", "#99D594FF" ,"#E6F598FF", "#FEE08BFF", "#FC8D59FF", "#D53E4FFF"))+theme_bw()+theme(plot.title = element_text(hjust = 0.5))
#############
library(SCENT)
library(scater)
dat <- as.matrix(sceList[['RNA']]@counts)
example_sce <- SingleCellExperiment(assays = list(counts = dat),colData = sceList@meta.data)
cpm(example_sce) <- calculateCPM(example_sce)
example_sce <- logNormCounts(example_sce) 
dat <- example_sce@assays@data@listData[["logcounts"]]
library(clusterProfiler)
library(org.Hs.eg.db)
geneid<-bitr(rownames(dat), fromType='SYMBOL', toType='ENTREZID', OrgDb='org.Hs.eg.db', drop = TRUE)
dat <- dat[geneid$SYMBOL,]
rownames(dat) <- geneid$ENTREZID

ccat.v <- CompCCAT(exp.m = dat, ppiA.m = net13Jun12.m)
names(ccat.v ) <- colnames(dat)
sceList$CCAT <- ccat.v[colnames(sceList)]

sceList$CCAT
pdf("CCAT.pdf",height = 4,width = 4.5)
umap_label <- FetchData(sceList,vars = c("CCAT", "UMAP_1", "UMAP_2"))
ggplot(umap_label,aes(x = UMAP_1,y =UMAP_2,colour =CCAT))+
  geom_point(size = 1.5)+scale_color_gradientn(values = seq(0,1,0.2),
                                             colours = c("#3288BDFF", "#99D594FF" ,"#E6F598FF", "#FEE08BFF", "#FC8D59FF", "#D53E4FFF"))+theme_bw()+theme(plot.title = element_text(hjust = 0.5))
dev.off()

####Monocle3

sceList <- RunMonocle3(
  srt = sceList ,
  clusters = "Celltype")
trajectory <- sceList@tools$Monocle3$trajectory
CellDimPlot(sceList, group.by = "Celltype",label = TRUE, theme_use = "theme_blank")+trajectory 

mono <- FeatureDimPlot(sceList, features = "Monocle3_Pseudotime",  theme_use = "theme_scp",show_stat = F) + trajectory
##PAGA
#sceList <- Standard_SCP(sceList)
sceList <- RunPAGA(
  srt = sceList, group_by = "Celltype",
  linear_reduction = "pca", nonlinear_reduction = "umap"
)

paga <- PAGAPlot(srt = sceList, reduction = "UMAP", label = TRUE, label_insitu = TRUE, label_repel = TRUE)+theme(legend.position = "none")+ggtitle("")
###Trajectory inference
sceList <- RunSlingshot(srt = sceList, group.by = "Celltype", reduction = "UMAP")
print(sceList @tools$Slingshot_Celltype_umap)
sling <- CellDimPlot(sceList, group.by = "Celltype", reduction = "UMAP",show_stat = F, lineages = paste0("Lineage", 1:3), lineages_span = 0.1,legend.position = "none")


